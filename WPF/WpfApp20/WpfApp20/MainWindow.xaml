<Window x:Class="WpfApp20.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:WpfApp20"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="717">
    <Window.Resources>
    
  

        <Style TargetType="TextBox" >
            <Setter Property="Background" >
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0, 0" EndPoint="0.5, 1">
                        <GradientStop Color="White" Offset="0"></GradientStop>
                        <GradientStop Color="Orange" Offset="1"></GradientStop>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Style.Triggers>


                <DataTrigger Binding="{Binding ElementName=comboBox, Path=SelectedIndex}" Value="0">
                    <Setter Property="FontSize" Value="20"></Setter>
                    <Setter Property="Foreground" Value="DarkOrchid"></Setter>
                    <Setter Property="FontWeight" Value="Bold"></Setter>
                    <Setter Property="FontStyle" Value="Italic"></Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=comboBox, Path=SelectedIndex}" Value="1">
                    <Setter Property="FontSize" Value="30"></Setter>
                    <Setter Property="Foreground" Value="Crimson"></Setter>
                    <Setter Property="FontWeight" Value="Thin"></Setter>
                    <Setter Property="FontStyle" Value="Oblique"></Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=comboBox, Path=SelectedIndex}" Value="2">
                    <Setter Property="FontSize" Value="15">
                    </Setter>
                    <Setter Property="Foreground" Value="DeepSkyBlue"></Setter>
                    <Setter Property="FontWeight" Value="Heavy"></Setter>
                    <Setter Property="FontStyle" Value="Normal"></Setter>
                </DataTrigger>

            </Style.Triggers>
        </Style>
        
        
        
        

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="IsEnabled" Value="False"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=textbox1, Path=Text}" Value=""></Condition>
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="True"></Setter>
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </Window.Resources>
    
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <DockPanel  LastChildFill="True"  Grid.Column="0">
            <Button DockPanel.Dock="Bottom" Height="33">Открыть</Button>
            <TextBox x:Name="textbox1"  TextWrapping = "Wrap" DockPanel.Dock="Bottom"></TextBox>
        </DockPanel>  
        
        <DockPanel  LastChildFill="True"  Grid.Column="2">
            <Button Style="{DynamicResource ButtonStyle1}" DockPanel.Dock="Bottom" Height="33">Закрыть</Button>
            <TextBox x:Name="textbox2" Text="{Binding ElementName=textbox1, Mode=TwoWay, Path=Text, UpdateSourceTrigger=PropertyChanged}"  DockPanel.Dock="Bottom" TextWrapping = "Wrap"></TextBox>
        </DockPanel>

        <DockPanel LastChildFill="False" Grid.Column="1">
            <Button DockPanel.Dock="Bottom" Height="33">Очистить</Button>
            <ComboBox x:Name="comboBox"  DockPanel.Dock="Top" Height="33">
                <ComboBoxItem>Style 1</ComboBoxItem>
                <ComboBoxItem>Style 2</ComboBoxItem>
                <ComboBoxItem>Style 3</ComboBoxItem>
            </ComboBox>
        </DockPanel>


    </Grid>
</Window>
